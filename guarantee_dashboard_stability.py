#!/usr/bin/env python3
"""
Sistema de Garantia de Estabilidade do Dashboard
Verifica e protege contra desatualiza√ß√µes ap√≥s commits
"""

import mysql.connector
import os
import subprocess
import time
from datetime import datetime, timedelta
from dotenv import load_dotenv

# Carregar vari√°veis de ambiente
load_dotenv('env_template.txt')

def get_db_connection():
    """Conecta ao banco de dados MySQL"""
    try:
        connection = mysql.connector.connect(
            host=os.getenv('DB_HOST'),
            user=os.getenv('DB_USER'),
            password=os.getenv('DB_PASSWORD'),
            database=os.getenv('DB_NAME')
        )
        return connection
    except Exception as e:
        print(f"Erro ao conectar ao banco: {e}")
        return None

def check_data_freshness():
    """Verifica se os dados est√£o atualizados"""
    print("üîç VERIFICANDO FRESCURA DOS DADOS...")
    
    connection = get_db_connection()
    if not connection:
        return False
    
    try:
        cursor = connection.cursor(dictionary=True)
        
        # Verificar √∫ltima atualiza√ß√£o de cada m√≥dulo
        modules = [
            ('leads_metrics', 'M√≥dulo 1 - Leads'),
            ('funnel_history', 'M√≥dulo 2 - Funil'),
            ('commercial_activities', 'M√≥dulo 3 - Atividades'),
            ('sales_metrics', 'M√≥dulo 4 - Vendas'),
            ('performance_vendedores', 'M√≥dulo 5 - Performance'),
            ('monthly_forecasts', 'M√≥dulo 6 - Previs√µes')
        ]
        
        all_fresh = True
        
        for table, module_name in modules:
            try:
                # Verificar √∫ltima atualiza√ß√£o
                if table == 'leads_metrics':
                    cursor.execute(f"SELECT MAX(created_date) as last_update FROM {table}")
                elif table == 'funnel_history':
                    cursor.execute(f"SELECT MAX(created_at) as last_update FROM {table}")
                elif table == 'monthly_forecasts':
                    cursor.execute(f"SELECT MAX(created_date) as last_update FROM {table}")
                else:
                    cursor.execute(f"SELECT MAX(created_date) as last_update FROM {table}")
                
                result = cursor.fetchone()
                last_update = result['last_update']
                
                if last_update:
                    # Converter para datetime se necess√°rio
                    if isinstance(last_update, str):
                        last_update = datetime.strptime(last_update, '%Y-%m-%d')
                    elif isinstance(last_update, datetime):
                        last_update = last_update.date()
                    
                    days_old = (datetime.now().date() - last_update).days
                    status = "‚úÖ" if days_old <= 3 else "‚ùå"
                    print(f"  {status} {module_name}: {days_old} dias atr√°s")
                    
                    if days_old > 3:
                        all_fresh = False
                else:
                    print(f"  ‚ö†Ô∏è {module_name}: Sem dados")
                    all_fresh = False
                    
            except Exception as e:
                print(f"  ‚ùå {module_name}: Erro - {e}")
                all_fresh = False
        
        return all_fresh
        
    except Exception as e:
        print(f"Erro na verifica√ß√£o: {e}")
        return False
    finally:
        connection.close()

def check_etl_processes():
    """Verifica se os processos ETL est√£o funcionando"""
    print("\n‚öôÔ∏è VERIFICANDO PROCESSOS ETL...")
    
    # Verificar se os scripts ETL existem e s√£o execut√°veis
    etl_scripts = [
        'ETL/kommo_etl_modulo1_leads.py',
        'ETL/kommo_etl_modulo2_funil.py',
        'ETL/kommo_etl_modulo3_atividades.py',
        'ETL/kommo_etl_modulo4_conversao.py',
        'ETL/kommo_etl_modulo5_performance.py',
        'ETL/kommo_etl_modulo6_forecast_integrado.py'
    ]
    
    all_scripts_ok = True
    
    for script in etl_scripts:
        if os.path.exists(script):
            print(f"  ‚úÖ {script}")
        else:
            print(f"  ‚ùå {script} - N√ÉO ENCONTRADO")
            all_scripts_ok = False
    
    return all_scripts_ok

def check_cron_jobs():
    """Verifica se os cron jobs est√£o configurados"""
    print("\n‚è∞ VERIFICANDO CRON JOBS...")
    
    try:
        # Verificar cron jobs ativos
        result = subprocess.run(['crontab', '-l'], capture_output=True, text=True)
        
        if result.returncode == 0:
            cron_content = result.stdout
            print("  ‚úÖ Cron jobs configurados:")
            
            # Verificar jobs importantes
            important_jobs = [
                'kommo_etl_modulo1_leads.py',
                'kommo_etl_modulo2_funil.py',
                'kommo_etl_modulo3_atividades.py',
                'kommo_etl_modulo4_vendas.py',
                'kommo_etl_modulo5_performance.py',
                'kommo_etl_modulo6_forecast_integrado.py'
            ]
            
            for job in important_jobs:
                if job in cron_content:
                    print(f"    ‚úÖ {job}")
                else:
                    print(f"    ‚ùå {job} - N√ÉO CONFIGURADO")
            
            return True
        else:
            print("  ‚ùå Nenhum cron job configurado")
            return False
            
    except Exception as e:
        print(f"  ‚ùå Erro ao verificar cron: {e}")
        return False

def check_dashboard_status():
    """Verifica se o dashboard est√° rodando"""
    print("\nüåê VERIFICANDO STATUS DO DASHBOARD...")
    
    try:
        # Verificar se o processo Streamlit est√° rodando
        result = subprocess.run(['pgrep', '-f', 'streamlit'], capture_output=True, text=True)
        
        if result.returncode == 0:
            print("  ‚úÖ Dashboard Streamlit est√° rodando")
            return True
        else:
            print("  ‚ùå Dashboard Streamlit N√ÉO est√° rodando")
            return False
            
    except Exception as e:
        print(f"  ‚ùå Erro ao verificar dashboard: {e}")
        return False

def check_database_connectivity():
    """Verifica conectividade com o banco"""
    print("\nüóÑÔ∏è VERIFICANDO CONECTIVIDADE COM BANCO...")
    
    connection = get_db_connection()
    if connection:
        print("  ‚úÖ Conex√£o com banco OK")
        connection.close()
        return True
    else:
        print("  ‚ùå Falha na conex√£o com banco")
        return False

def create_backup():
    """Cria backup antes de qualquer opera√ß√£o cr√≠tica"""
    print("\nüíæ CRIANDO BACKUP DE SEGURAN√áA...")
    
    try:
        backup_file = f"backup_pre_commit_{datetime.now().strftime('%Y%m%d_%H%M%S')}.sql"
        backup_command = f"mysqldump -h {os.getenv('DB_HOST')} -u {os.getenv('DB_USER')} -p{os.getenv('DB_PASSWORD')} {os.getenv('DB_NAME')} > {backup_file}"
        
        result = subprocess.run(backup_command, shell=True, capture_output=True, text=True)
        
        if result.returncode == 0:
            print(f"  ‚úÖ Backup criado: {backup_file}")
            return True
        else:
            print(f"  ‚ùå Erro no backup: {result.stderr}")
            return False
            
    except Exception as e:
        print(f"  ‚ùå Erro ao criar backup: {e}")
        return False

def run_safety_checks():
    """Executa todas as verifica√ß√µes de seguran√ßa"""
    print("=" * 80)
    print("üõ°Ô∏è VERIFICA√á√ïES DE SEGURAN√áA - DASHBOARD")
    print("=" * 80)
    print(f"üìÖ Data: {datetime.now().strftime('%d/%m/%Y %H:%M')}")
    print("=" * 80)
    
    checks = {
        "Dados Atualizados": check_data_freshness(),
        "Scripts ETL": check_etl_processes(),
        "Cron Jobs": check_cron_jobs(),
        "Dashboard Rodando": check_dashboard_status(),
        "Conex√£o Banco": check_database_connectivity()
    }
    
    print("\n" + "=" * 80)
    print("üìã RESUMO DAS VERIFICA√á√ïES")
    print("=" * 80)
    
    all_ok = True
    for check_name, status in checks.items():
        icon = "‚úÖ" if status else "‚ùå"
        print(f"{icon} {check_name}: {'OK' if status else 'FALHA'}")
        if not status:
            all_ok = False
    
    print("\n" + "=" * 80)
    
    if all_ok:
        print("üéâ TODAS AS VERIFICA√á√ïES PASSARAM!")
        print("‚úÖ O dashboard est√° seguro para commit")
        
        # Criar backup de seguran√ßa
        create_backup()
        
        print("\nüí° RECOMENDA√á√ïES:")
        print("  1. Fa√ßa commit normalmente")
        print("  2. Ap√≥s o commit, execute: python AUTOMATION/quality_assurance.py")
        print("  3. Monitore o dashboard por 24h")
        
    else:
        print("‚ö†Ô∏è VERIFICA√á√ïES FALHARAM!")
        print("‚ùå N√ÉO FA√áA COMMIT AT√â CORRIGIR OS PROBLEMAS")
        
        print("\nüîß A√á√ïES NECESS√ÅRIAS:")
        if not checks["Dados Atualizados"]:
            print("  1. Execute os ETLs: python ETL/kommo_etl_modulo*.py")
        if not checks["Scripts ETL"]:
            print("  2. Verifique se todos os scripts ETL existem")
        if not checks["Cron Jobs"]:
            print("  3. Configure cron jobs: bash AUTOMATION/setup_cron.sh")
        if not checks["Dashboard Rodando"]:
            print("  4. Inicie o dashboard: streamlit run DASHBOARD/main_app.py")
        if not checks["Conex√£o Banco"]:
            print("  5. Verifique credenciais do banco")
    
    print("=" * 80)
    return all_ok

def create_protection_script():
    """Cria script de prote√ß√£o para Git hooks"""
    print("\nüîí CRIANDO SCRIPT DE PROTE√á√ÉO...")
    
    protection_script = """#!/bin/bash
# Git Hook: pre-commit
# Prote√ß√£o contra desatualiza√ß√£o do dashboard

echo "üõ°Ô∏è Verificando seguran√ßa do dashboard..."

# Executar verifica√ß√µes
python3 guarantee_dashboard_stability.py

if [ $? -eq 0 ]; then
    echo "‚úÖ Commit permitido"
    exit 0
else
    echo "‚ùå Commit bloqueado - Corrija os problemas primeiro"
    exit 1
fi
"""
    
    with open('.git/hooks/pre-commit', 'w') as f:
        f.write(protection_script)
    
    # Tornar execut√°vel
    os.chmod('.git/hooks/pre-commit', 0o755)
    
    print("  ‚úÖ Script de prote√ß√£o criado: .git/hooks/pre-commit")
    print("  üìù Agora todos os commits ser√£o verificados automaticamente")

def main():
    """Fun√ß√£o principal"""
    print("üõ°Ô∏è SISTEMA DE GARANTIA DE ESTABILIDADE DO DASHBOARD")
    print("=" * 60)
    
    # Executar verifica√ß√µes
    is_safe = run_safety_checks()
    
    if is_safe:
        # Perguntar se quer criar prote√ß√£o autom√°tica
        response = input("\nüîí Deseja criar prote√ß√£o autom√°tica para commits? (s/n): ")
        if response.lower() == 's':
            create_protection_script()
    
    print("\nüìã PR√ìXIMOS PASSOS:")
    print("1. Execute este script antes de cada commit")
    print("2. Ou configure a prote√ß√£o autom√°tica")
    print("3. Monitore o dashboard ap√≥s commits")
    print("4. Use: python AUTOMATION/quality_assurance.py para verifica√ß√µes completas")

if __name__ == "__main__":
    main()
